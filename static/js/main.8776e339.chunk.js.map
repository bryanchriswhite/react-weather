{"version":3,"sources":["util.js","components/MainWeather.js","components/HourlyTable.js","components/HourlyGraph.js","components/SettingsDrawer.js","components/FabOverlay.js","store/localstorage.js","store/reducer.js","App.js","serviceWorker.js","index.js"],"names":["kelvinToC","kelvin","temp","Math","round","isNaN","cities","require","cityMap","Object","entries","map","name","city","lat","lon","useStyles","makeStyles","mainWeather","background","MainWeather","location","setLocation","icons","high","low","classes","Paper","className","Grid","container","spacing","item","xs","style","Location","value","update","sm","alignItems","Typography","variant","ArrowUpward","fontSize","ArrowDownward","justify","moment","format","Autocomplete","onChange","_","v","options","getOptionLabel","option","renderInput","params","TextField","label","table","textAlign","HourlyTable","hours","length","head","TableHead","TableRow","TableCell","hourRows","hour","rain","newDayRow","hourMoment","unix","dt","time","key","colSpan","backgroundColor","display","Navigation","transform","wind_deg","component","marginLeft","speed","mps","mpsToKPH","formatWindSpeed","wind_speed","TableContainer","Table","TableBody","hourlyGraph","hourLabel","tempLabel","svg","fontFamily","transition","transformOrigin","HourlyGraph","tempArea","area","x","i","y1","h","y0","curve","curveBasis","tempGraph","hourlyTemps","hourLabels","y","tempLabels","preserveAspectRatio","viewBox","id","gradientTransform","offset","stopColor","fill","stroke","d","x1","x2","y2","strokeWidth","SettingsDrawer","open","onClose","settings","setSettings","maxWind","minRain","Drawer","anchor","List","dense","ListItem","ListItemText","Slider","steps","min","max","valueLabelDisplay","fixedGrid","position","height","width","pointerEvents","justifyContent","alignContent","top","left","card","margin","FabOverlay","hourlyWeather","useState","drawerOpen","setDrawerOpen","modalOpen","setModalOpen","cards","totalRain","peekWind","slice","push","Card","CardHeader","title","CardContent","Modal","modal","Fade","in","Container","maxWidth","outline","Fab","onClick","Settings","Home","DirectionsWalk","save","s","state","localStorage","setItem","JSON","stringify","load","defaultState","loadedJSON","window","getItem","loadedState","parse","error","console","cityNames","keys","reducer","action","newState","type","data","Error","country","current","daily","urlFor","App","currentWeatherIcons","useReducer","dispatch","setData","hourly","useEffect","a","fetch","mode","res","ok","json","fetchWeather","weather","w","icon","src","replace","alt","description","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8776e339.chunk.js","sourcesContent":["export function kelvinToC(kelvin) {\n    const temp = (Math.round(kelvin - 273.15) * 100) / 100\n    if (isNaN(temp)) {\n        return '--'\n    }\n    return temp;\n}\n\nexport function mpsToKPH(mps) {\n    return Math.round(mps * 3.6 * 100) / 100;\n}\n","import React from 'react';\nimport {ArrowUpward, ArrowDownward} from '@material-ui/icons';\nimport {Autocomplete} from '@material-ui/lab';\nimport moment from 'moment';\nimport {\n    Grid,\n    makeStyles,\n    Paper,\n    TextField,\n    Typography,\n} from '@material-ui/core';\n\nimport {kelvinToC} from \"../util\";\n\nconst cities = require('../cities.json');\nconst cityMap = Object.entries(cities).map(([name, [lat, lon]]) => ({\n    city: name, lat, lon\n}))\n\nconst useStyles = makeStyles({\n    mainWeather: {\n        background: '#d8f0f3',\n        'margin-bottom': '25px'\n    }\n})\n\nexport default function MainWeather({location, setLocation, icons, temp, high, low}) {\n    const classes = useStyles();\n    return (\n        <Paper className={classes.mainWeather}>\n            <Grid container spacing={3}>\n                <Grid item xs={12} style={{'paddingTop': 0}}>\n                    <Location className='location' value={location} update={setLocation}/>\n                </Grid>\n                <Grid item xs={12} sm={8} container alignItems='center'>\n                    <Grid item xs={6} sm={5}>\n                        <Typography variant='h2'>\n                            {kelvinToC(temp)}&#176;c\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6} sm={7}>\n                        {icons}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} sm={4} container>\n                    <Grid item xs={6} sm={12}>\n                        <Typography variant='h3'>\n                            <ArrowUpward fontSize='large'/>\n                            {kelvinToC(high)}&#176;c\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={6} sm={12}>\n                        <Typography variant='h3'>\n                            <ArrowDownward fontSize='large'/>\n                            {kelvinToC(low)}&#176;c\n                        </Typography>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} container justify='space-around'>\n                    <Typography variant='h4'>\n                        {moment().format('ddd, MMM DD')}\n                    </Typography>\n                    <Typography variant='h4'>\n                        {moment().format('HH:mm')}\n                    </Typography>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nfunction Location({value, update}) {\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(_, v) => update(v)}\n            options={cityMap}\n            getOptionLabel={(option) => option.city}\n            renderInput={(params) => <TextField {...params} label=\"Location\" variant=\"filled\"/>}\n        />)\n}","import React from 'react';\nimport moment from 'moment';\nimport {Navigation} from \"@material-ui/icons\";\nimport {\n    makeStyles,\n    Paper,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Typography,\n} from \"@material-ui/core\";\n\nimport {kelvinToC, mpsToKPH} from \"../util\";\n\nconst useStyles = makeStyles({\n    table: {\n        '& td, & th': {\n            textAlign: 'center'\n        }\n    }\n})\n\nexport default function HourlyTable({hours}) {\n    const classes = useStyles();\n    if (!hours || hours.length === 0) {\n        return '';\n    }\n\n    // TODO: add settings for units\n    const head = (\n        <TableHead>\n            <TableRow>\n                <TableCell>\n                    <Typography>\n                        Time\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Typography>\n                        Temp. (&#176;c)\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Typography>\n                        Rain (mm)\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Typography>\n                        Wind (km/h)\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        </TableHead>\n    )\n\n    // TODO: insert date row every new day...\n    const hourRows = hours.map(hour => {\n        let rain = '--';\n        if (hour.rain && hour.rain['1h']) {\n            rain = hour.rain['1h']\n        }\n\n        let newDayRow = '';\n        const hourMoment = moment.unix(hour.dt);\n        const time = hourMoment.format('HH:mm')\n        if (time === '00:00') {\n            newDayRow = (\n                <TableRow key={hourMoment.format('MMDD')}>\n                    <TableCell colSpan={4} style={{backgroundColor: '#f1f1f1'}}>\n                        <Typography variant='h6'>\n                            {hourMoment.format('ddd, MMM DD')}\n                        </Typography>\n                    </TableCell>\n                </TableRow>\n            )\n        }\n\n        return (<>\n            {newDayRow}\n            <TableRow key={hour.dt}>\n                <TableCell>\n                    {time}\n                </TableCell>\n                <TableCell>\n                    {kelvinToC(hour.temp)}\n                </TableCell>\n                <TableCell>\n                    {rain}\n                </TableCell>\n                <TableCell style={{display: 'flex'}}>\n                    <Navigation style={{transform: `rotate(${hour.wind_deg}deg`}}/>\n                    <Typography component='span' style={{marginLeft: '10px'}}>\n                        {formatWindSpeed(hour.wind_speed)}\n                    </Typography>\n                </TableCell>\n            </TableRow>\n        </>)\n    })\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table}>\n                {head}\n                <TableBody>\n                    {hourRows}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n\nfunction formatWindSpeed(speed) {\n    speed = mpsToKPH(speed);\n    if (speed < 1) {\n        return '< 1'\n    }\n    return speed;\n}","import React from 'react';\nimport {Paper} from '@material-ui/core';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport moment from 'moment';\n\nimport {area, line, curveBasis} from 'd3';\nimport {kelvinToC} from \"../util\";\n\nconst useStyles = makeStyles({\n    hourlyGraph: {\n        background: '#d8f0f3',\n        'margin-bottom': '25px'\n    },\n    hourLabel: {\n        fontSize: '2px'\n    },\n    tempLabel: {\n        fontSize: '1.5px'\n    },\n    svg: {\n        fontFamily: '\"Roboto\", \"Helvetica\", \"Arial\", sans-serif',\n        '& path': {\n            transition: 'd 500ms',\n            transform: 'scaleY(-1) translate(0, 4px)',\n            transformOrigin: 'center',\n        },\n    }\n})\n\nexport default function HourlyGraph({hours}) {\n    const classes = useStyles();\n    const tempArea = area()\n        .x((_, i) => (i * 3) - 1)\n        .y1(h =>  h / 3)\n        .y0(_ => 0)\n        .curve(curveBasis);\n\n    let tempGraph = '';\n    if (hours) {\n        const hourlyTemps = hours.map(h => kelvinToC(h.temp));\n        const hourLabels = hours.map((hour, i) => {\n            if (i % 2 === 0) {\n                return null;\n            }\n            const time = moment.unix(hour.dt).format('HH:mm');\n            return (\n                <text\n                    className={classes.hourLabel}\n                    x={i * 3 - 2.5}\n                    y={14}\n                    key={hour.dt}\n                >\n                    {time}\n                </text>\n            )\n        })\n        const tempLabels = hourlyTemps.map((temp, i) => {\n            return (\n                <text\n                    key={i}\n                    className={classes.tempLabel}\n                    x={i * 3 - 1.75}\n                    y={`${12 - (temp / 3 + 2)}`}\n                    >\n                    {temp}\n                </text>\n            )\n        })\n\n        tempGraph = (<svg\n            className={classes.svg}\n            preserveAspectRatio='xMinYMin slice'\n            viewBox={`0 0 36 15`}\n        >\n            <defs>\n                <linearGradient id='tempGradient' gradientTransform='rotate(90)'>\n                    <stop offset=\"0%\" stopColor=\"#fa0\"/>\n                    <stop offset=\"15%\" stopColor=\"#fa0\"/>\n                    <stop offset=\"100%\" stopColor=\"#fc0\"/>\n                </linearGradient>\n            </defs>\n            <path\n                fill='url(#tempGradient)'\n                stroke='none'\n                d={tempArea(hourlyTemps)}\n            />\n            {tempLabels}\n            <line x1={0} x2={36} y1={11} y2={11} stroke='black' strokeWidth='.1px'/>\n            {hourLabels}\n        </svg>)\n    }\n\n    return (\n        <Paper className={classes.hourlyGraph}>\n            {tempGraph}\n        </Paper>\n    )\n}","import React from 'react';\nimport {\n    Drawer,\n    List,\n    ListItem,\n    ListItemText,\n    Slider,\n} from '@material-ui/core';\n\nexport default function SettingsDrawer({open, onClose, settings, setSettings}) {\n    const setMaxWind = (_, maxWind) => setSettings({maxWind})\n    const setMinRain = (_, minRain) => setSettings({minRain})\n    const {maxWind, minRain} = settings;\n\n    return (\n        <Drawer anchor='left' open={open} onClose={onClose}>\n            <List dense>\n                <ListItem>\n                    <ListItemText>\n                        Max wind speed (km/h)\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <Slider\n                        steps={1}\n                        min={0}\n                        max={50}\n                        valueLabelDisplay='auto'\n                        onChange={setMaxWind}\n                        value={maxWind}\n                    />\n                </ListItem>\n                <ListItem>\n                    <ListItemText>\n                        Min rainfall (mm)\n                    </ListItemText>\n                </ListItem>\n                <ListItem>\n                    <Slider\n                        steps={1}\n                        min={0}\n                        max={100}\n                        valueLabelDisplay='auto'\n                        onChange={setMinRain}\n                        value={minRain}\n                    />\n                </ListItem>\n            </List>\n        </Drawer>\n    )\n}\n\n","import React, {useState} from 'react';\nimport {DirectionsWalk, Home, Settings} from \"@material-ui/icons\";\nimport {\n    Card,\n    CardHeader,\n    CardContent,\n    Container,\n    Fab,\n    Fade,\n    Grid,\n    makeStyles,\n    Modal,\n} from \"@material-ui/core\";\n\nimport SettingsDrawer from './SettingsDrawer';\n\nconst useStyles = makeStyles({\n    fixedGrid: {\n        position: 'fixed',\n        height: '100vh',\n        width: '100vw',\n        pointerEvents: 'none',\n        justifyContent: 'flex-end',\n        alignContent: 'flex-end',\n        textAlign: 'right',\n        top: 0,\n        left: 0\n    },\n    card: {\n        margin: '10px',\n        textAlign: 'center',\n    }\n});\n\nexport default function FabOverlay({hourlyWeather, settings, setSettings}) {\n    const [drawerOpen, setDrawerOpen] = useState(false);\n    const openDrawer = () => setDrawerOpen(true);\n    const closeDrawer = () => setDrawerOpen(false);\n\n    const [modalOpen, setModalOpen] = useState(false);\n    const openModal = () => setModalOpen(true);\n    const closeModal = () => setModalOpen(false);\n\n    const {maxWind, minRain} = settings;\n    const classes = useStyles();\n\n    let cards = [];\n    let totalRain = 0;\n    let peekWind = 0;\n    if (hourlyWeather) {\n        for (const hour of hourlyWeather.slice(0, 48)) {\n            if (hour.rain && hour.rain['1h']) {\n                totalRain += hour.rain['1h'];\n            }\n            if (hour.wind_speed > peekWind) {\n                peekWind = hour.wind_speed;\n            }\n        }\n    }\n\n    if (totalRain < minRain) {\n        cards.push(\n            <Card className={classes.card}>\n                <CardHeader title='Water the plants!'/>\n                <CardContent>\n                    It's only going to rain {Math.round(totalRain * 100) / 100}mm in the next 48 hours.\n                </CardContent>\n            </Card>\n        )\n    }\n\n    if (peekWind > maxWind) {\n        cards.push(\n            <Card className={classes.card}>\n                <CardHeader title='Bring the plants in!'/>\n                <CardContent>\n                    The wind is supposed to peek at {Math.round(peekWind * 100) / 100}km/h in the next 48 hours.\n                </CardContent>\n            </Card>\n        )\n    }\n\n    return (<>\n        <SettingsDrawer\n            open={drawerOpen}\n            onClose={closeDrawer}\n            settings={settings}\n            setSettings={setSettings}\n        />\n        <Modal\n            className={classes.modal}\n            open={modalOpen}\n            onClose={closeModal}\n        >\n            <Fade in={modalOpen}>\n                <Container maxWidth='xs' style={{outline: 'none'}}>\n                    {cards}\n                </Container>\n            </Fade>\n        </Modal>\n        <Grid container className={classes.fixedGrid} spacing={3}>\n            <Grid item xs={12}>\n                <Fab onClick={openDrawer} style={{pointerEvents: 'initial'}}>\n                    <Settings/>\n                </Fab>\n            </Grid>\n            <Grid item xs={12}>\n                <Fab onClick={openModal} style={{pointerEvents: 'initial'}}>\n                    <Home/>\n                    <DirectionsWalk/>\n                </Fab>\n            </Grid>\n        </Grid>\n    </>)\n}","import * as _ from 'lodash';\n\nexport default function factory(key) {\n    const _save = (s) => save(key, s)\n    const _load = (d) => load(key, d)\n    return {\n        save: _save,\n        load: _load,\n    }\n}\n\nexport function save(key, state) {\n    localStorage.setItem(key, JSON.stringify(state));\n}\n\nexport function load(key, defaultState) {\n    const loadedJSON = window.localStorage.getItem(key);\n    if (loadedJSON) {\n        try {\n            const loadedState = JSON.parse(loadedJSON);\n            let state = {};\n            _.merge(state, defaultState, loadedState);\n            return state\n        } catch (error) {\n            // TODO: better error handling\n            console.error(error)\n        }\n    }\n    return defaultState;\n}\n\n","import ls from './localstorage';\n\nconst {save, load} = ls('REACT_WEATHER_STATE');\nconst cities = require('../cities.json');\nconst cityNames = Object.keys(cities);\n\nexport function reducer(state, action) {\n    let newState;\n    switch (action.type) {\n        case 'setData':\n            const {data} = action;\n            newState = {...state, data};\n            return newState;\n        case 'setLocation':\n            const {location} = action;\n            newState = {...state, location};\n            save(newState);\n            return newState;\n        case 'setHour':\n            const {hour} = action;\n            newState = { ...state, hour };\n            save(newState);\n            return newState;\n        case 'setSettings':\n            const {settings} = action;\n            newState = {\n                ...state, settings: {\n                    ...state.settings,\n                    ...settings\n                }\n            };\n            save(newState);\n            return newState\n        default:\n            throw new Error('unknown action');\n    }\n}\n\nconst _defaultState = {\n    location: {\n        country: 'Germany',\n        city: cityNames[0],\n        lat: cities[cityNames[0]][0],\n        lon: cities[cityNames[0]][1]\n    },\n    data: {\n        current: {},\n        daily: [{temp: {}}]\n    },\n    settings: {\n        maxWind: 15,\n        minRain: 10,\n    }\n};\n\nexport const defaultState = load(_defaultState);\n","import React, {useEffect, useReducer} from 'react';\nimport {Container} from \"@material-ui/core\";\n\nimport './App.css';\nimport MainWeather from \"./components/MainWeather\";\nimport HourlyTable from \"./components/HourlyTable\";\nimport HourlyGraph from \"./components/HourlyGraph\";\nimport FabOverlay from \"./components/FabOverlay\";\nimport {defaultState, reducer} from \"./store/reducer\";\n\nconst WEATHER_URL = 'https://api.openweathermap.org/data/2.5/onecall?exclude=minutely&appid=9052b1a9ec107a8d04ddc0818c7f8e59'\nconst ICON_URL_TEMPLATE = 'https://openweathermap.org/img/wn/$@2x.png'\n\nfunction getIconURL(icon) {\n    return ICON_URL_TEMPLATE.replace('$', icon);\n}\n\nfunction urlFor({lat, lon}) {\n    return WEATHER_URL + `&lat=${lat}&lon=${lon}`;\n}\n\nfunction App() {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n    const setLocation = (location) => dispatch({\n        type: 'setLocation', location\n    })\n\n    const setData = (data) => dispatch({\n        type: 'setData', data\n    })\n\n    const setSettings = (settings) => dispatch({\n        type: 'setSettings', settings\n    })\n\n    const {\n        data: {current, daily, hourly},\n        settings,\n        location,\n    } = state;\n\n    useEffect(() => {\n        async function fetchWeather() {\n            const res = await fetch(urlFor(location), {mode: 'cors'});\n            if (res.ok) {\n                setData(await res.json());\n            }\n        }\n\n        fetchWeather();\n    }, [location]);\n\n    let currentWeatherIcons;\n    if (current && current.weather) {\n        currentWeatherIcons = current.weather.map(w => {\n            const src = getIconURL(w.icon);\n            return (\n                <img alt={w.description} src={src} key={src}></img>\n            )\n        });\n    }\n\n    return (\n        <div className=\"App\">\n            <Container maxWidth='sm'>\n                <MainWeather\n                    location={location}\n                    setLocation={setLocation}\n                    icons={currentWeatherIcons}\n                    temp={current.temp}\n                    high={daily[0].temp.max}\n                    low={daily[0].temp.min}\n                />\n                <HourlyGraph hours={hourly}/>\n                <HourlyTable\n                    hours={hourly}\n                />\n                <FabOverlay hourlyWeather={hourly} settings={settings} setSettings={setSettings}/>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}